/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frinthesia.gui.dialog;

import com.frinika.frame.FrinikaFrame;
import com.frinika.project.ProjectContainer;
import com.frinika.sequencer.gui.ProjectFrame;
import com.frinika.sequencer.gui.partview.PartViewEditor;
import com.frinika.sequencer.gui.partview.VoicePartViewSplitPane;
import com.frinika.sequencer.gui.pianoroll.PianoControllerSplitPane;
import com.frinika.sequencer.gui.pianoroll.PianoRoll;
import com.frinika.sequencer.gui.pianoroll.VirtualPianoVert;
import com.frinika.sequencer.gui.tracker.TrackerPanel;
import com.frinika.sequencer.project.AbstractSequencerProjectContainer;
import com.frinika.sequencer.project.mididevices.gui.MidiDevicesPanel;
import com.frinika.tootX.midi.MidiLearnIF;
import frinthesia.gui.FrinthesiaFrame;
import java.awt.BorderLayout;
import java.awt.Component;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiSystem;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;

/**
 * Main play dialog for the game.
 *
 * @version 0.1.0 2015/11/28
 * @author Frinthesia Project
 */
public class PlayDialog extends javax.swing.JDialog {

    private FrinikaFrame project;
    private JLayeredPane contentPane;

    public PlayDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        init();
        initComponents();
    }

    private void init() {
        try {
//            project = new FrinikaFrame();
//            MidiDevice mididdevice = new SoftSynthesizer();
//            mididdevice.open();
//            project.setProject(new ProjectContainer(MidiSystem.getSequence(getClass().getResource("/frinthesia/fuga_g-moll.mid")), mididdevice));
//            project.setVisible(true);

            // FrinikaFrame frame = (FrinikaFrame) parent;
            ProjectContainer projectContainer = new ProjectContainer(MidiSystem.getSequence(getClass().getResource("/frinthesia/fuga_g-moll.mid")));
            ProjectFrame projectFrame = new ProjectFrameImpl(projectContainer);
            PartViewEditor editor = new PartViewEditor(projectFrame);
            PianoRoll pianoRoll = new PianoRoll(projectContainer, editor);
            VirtualPianoVert pianoVert = new VirtualPianoVert(pianoRoll, 20, 20);
            add(pianoRoll, BorderLayout.CENTER);
            add(pianoVert, BorderLayout.WEST);
        } catch (Exception ex) {
            Logger.getLogger(FrinthesiaFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PlayDialog dialog = new PlayDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private static class ProjectFrameImpl implements ProjectFrame {

        private final ProjectContainer projectContainer;

        public ProjectFrameImpl(ProjectContainer projectContainer) {
            this.projectContainer = projectContainer;
        }

        @Override
        public MidiLearnIF getMidiLearnIF() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void resetViews() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void repaintViews() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void repaintPartView() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void initViews() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void addMidiDevices(JComponent menu, List<MidiDevice.Info> infos, List<Icon> icons) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void addMidiDevices(JComponent menu) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public MidiDevice selectMidiDevice() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void tryQuit() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public AbstractSequencerProjectContainer getProjectContainer() {
            return projectContainer;
        }

        @Override
        public void infoMessage(String string) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public MidiDevicesPanel getMidiDevicesPanel() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public VoicePartViewSplitPane getVoicePartViewSplitPane() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void setStatusBarMessage(String msg) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void message(String msg, int type) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void message(String msg) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void error(String msg) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void error(String msg, Throwable t) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void error(Throwable t) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public boolean confirm(String msg) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public String prompt(String msg, String initialValue) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public String prompt(String msg) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public String promptFile(String defaultFilename, String[][] suffices, boolean saveMode, boolean directoryMode) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public String promptFile(String defaultFilename, String[][] suffices, boolean saveMode) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public String promptFile(String defaultFilename, String[][] suffices) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void showRightButtonPartPopup(Component invoker, int x, int y) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public JFrame getFrame() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public JPopupMenu getNewLaneMenu() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public TrackerPanel getTrackerPanel() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public PianoControllerSplitPane getPianoControllerPane() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public VoicePartViewSplitPane getPartViewEditor() {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
