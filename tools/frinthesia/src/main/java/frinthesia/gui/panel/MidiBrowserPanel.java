/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frinthesia.gui.panel;

import com.frinika.tools.MyFileFilter;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 * MIDI browser panel.
 *
 * @version 0.1.0 2015/11/28
 * @author Frinthesia Project
 */
public class MidiBrowserPanel extends javax.swing.JPanel implements FrinthesiaPanel {

    private File currentPath;
    private final MidiBrowserModel tableModel = new MidiBrowserModel();
    private JFileChooser fileChooser = new JFileChooser();
    private PanelOpenerListener panelOpener;

    /**
     * Creates new form midiBrowserPanel
     */
    public MidiBrowserPanel() {
        initComponents();

        File initialPath = null;
        try {
            initialPath = new File(new File(".").getCanonicalPath());
        } catch (IOException ex) {
            Logger.getLogger(MidiBrowserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        setCurrentPath(initialPath);
        tableModel.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browserScrollPane = new javax.swing.JScrollPane();
        browserTable = new javax.swing.JTable();
        currentPathBrowseButton = new javax.swing.JButton();
        currentPathTextField = new javax.swing.JTextField();

        browserTable.setModel(tableModel);
        browserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                browserTableMousePressed(evt);
            }
        });
        browserScrollPane.setViewportView(browserTable);

        currentPathBrowseButton.setText("Browse...");
        currentPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPathBrowseButtonActionPerformed(evt);
            }
        });

        currentPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPathTextFieldActionPerformed(evt);
            }
        });
        currentPathTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentPathTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browserScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentPathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentPathBrowseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currentPathBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browserScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void currentPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPathBrowseButtonActionPerformed
        fileChooser.setCurrentDirectory(currentPath);
        fileChooser.setFileFilter(new MyFileFilter(".mid", "Midi files"));
        int showDialogResult = fileChooser.showOpenDialog(this);
        if (showDialogResult == JFileChooser.APPROVE_OPTION) {
            currentPath = fileChooser.getCurrentDirectory();
            tableModel.loadForPath(currentPath);
        }
    }//GEN-LAST:event_currentPathBrowseButtonActionPerformed

    private void currentPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentPathTextFieldActionPerformed

    private void browserTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browserTableMousePressed
        if (evt.getClickCount() == 2 && evt.getButton() == 1) {
            Point point = evt.getPoint();
            int row = browserTable.rowAtPoint(point);
            FileRecord record = tableModel.getRecord(row);
            if (record.getFileType() == FileRecord.FileType.DIRECTORY) {
                setCurrentPath(record.getFile());
            } else if (record.getFileType() == FileRecord.FileType.MIDI) {
                PlayMidiPanel playMidiPanel = new PlayMidiPanel();
                panelOpener.openPanel(new FrinthesiaPanelRecord(playMidiPanel, "play", true));
            }
        }
    }//GEN-LAST:event_browserTableMousePressed

    private void currentPathTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentPathTextFieldKeyReleased
        if (evt.getModifiers() == 0 && evt.getKeyCode() == KeyEvent.VK_ENTER) {
            File newDirectory = new File(currentPathTextField.getText());
            if (newDirectory.isDirectory()) {
                setCurrentPath(newDirectory);
            }
        }
    }//GEN-LAST:event_currentPathTextFieldKeyReleased

    private void setCurrentPath(File newPath) {
        currentPath = newPath;
        tableModel.loadForPath(newPath);
        currentPathTextField.setText(currentPath.getAbsolutePath());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane browserScrollPane;
    private javax.swing.JTable browserTable;
    private javax.swing.JButton currentPathBrowseButton;
    private javax.swing.JTextField currentPathTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean canNext() {
        return true;
    }

    @Override
    public FrinthesiaPanelRecord getPreviousPanel() {
        return null;
    }

    @Override
    public FrinthesiaPanelRecord getNextPanel() {
        PlayMidiPanel playMidiPanel = new PlayMidiPanel();
        return new FrinthesiaPanelRecord(playMidiPanel, "play", true);
    }

    @Override
    public void registerPanelOpener(PanelOpenerListener panelOpener) {
        this.panelOpener = panelOpener;
    }
}
